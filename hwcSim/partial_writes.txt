Include a union in the component (common code???) which is a pointer, or an
equivalent-size int.

The int has two magic values:
   0 : the component has written to *NONE* of its bits

  -1 : the component has written to *ALL* of its bits (no matter the size);
       in the case of a conditional connection, this can also mean "the
       component decided not to write."

If it is anything other than that, then it represents a *PARTIAL WRITE*; the
component has written to some, but not all, of its bits.  How this is handled
depends on the size of the output range.

If the output range is <= 8*sizeof(void*) bits, then the field is interpreted
as a *bitmask*, and the integer is read directly.

However, if the output range is larger than can fit into the field, it is
interpreted as a *pointer* to a bitmask.  In that case, we malloc() the
bitmask only if/when it becomes necessary (meaning that most components will
never allocate this).  Of course, it only becomes necessary when we are
forced to flush out elements from the 'deferred' list - which we expect to be
fairly rare.  So, we normally expect the field to be one of the two magic
values, for almost all components, almost all of the time.

